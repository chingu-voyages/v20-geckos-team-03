{"ast":null,"code":"const initState = {\n  items: [],\n  addedItems: [],\n  totalPrice: 0\n};\n\nconst CartReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"increment\":\n      {\n        let selectedItem = state.items.find(item => item.id === action.payload.id);\n        let existedItem = state.addedItems.find(item => item.id === action.payload.id);\n\n        if (existedItem) {\n          selectedItem.qty += action.payload.qty;\n          return { ...state,\n            totalPrice: state.totalPrice + selectedItem.price * action.payload.qty\n          };\n        } else {\n          selectedItem.qty = action.payload.qty;\n          let newTotal = state.totalPrice + selectedItem.price * action.payload.qty;\n          return { ...state,\n            addedItems: [...state.addedItems, selectedItem],\n            totalPrice: newTotal\n          };\n        }\n      }\n    // const newData = Object.assign([], { ...state });\n    // let item = newData.find((doughnut) => {\n    //   return doughnut.id == action.payload;\n    // });\n    // item.inCartSum += 1;\n    // newData[action.payload] = item;\n    // item = Object.assign([], { ...newData });\n    // return item;\n    // case \"decrement\":\n    //   const newData1 = Object.assign([], { ...state });\n    //   let item1 = newData1.find((doughnut) => {\n    //     return doughnut.id == action.payload;\n    //   });\n    //   item1.inCartSum += 1;\n    //   newData1[action.payload] = item;\n    //   item1 = Object.assign([], { ...newData1 });\n    //   return item1;\n\n    case \"FETCH_ITEMS\":\n      const fetchedItems = action.payload;\n      return { ...state,\n        items: fetchedItems\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default CartReducer;","map":{"version":3,"sources":["/Users/yusukeyoshino/Desktop/React/chingu/v20-geckos-team-03/src/redux/reducer.js"],"names":["initState","items","addedItems","totalPrice","CartReducer","state","action","type","selectedItem","find","item","id","payload","existedItem","qty","price","newTotal","fetchedItems"],"mappings":"AAAA,MAAMA,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE,EADS;AAEhBC,EAAAA,UAAU,EAAE,EAFI;AAGhBC,EAAAA,UAAU,EAAE;AAHI,CAAlB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,SAAT,EAAoBM,MAApB,KAA+B;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AAAkB;AAChB,YAAIC,YAAY,GAAGH,KAAK,CAACJ,KAAN,CAAYQ,IAAZ,CAChBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACM,OAAP,CAAeD,EADpB,CAAnB;AAIA,YAAIE,WAAW,GAAGR,KAAK,CAACH,UAAN,CAAiBO,IAAjB,CACfC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACM,OAAP,CAAeD,EADrB,CAAlB;;AAIA,YAAIE,WAAJ,EAAiB;AACfL,UAAAA,YAAY,CAACM,GAAb,IAAoBR,MAAM,CAACM,OAAP,CAAeE,GAAnC;AACA,iBAAO,EACL,GAAGT,KADE;AAELF,YAAAA,UAAU,EACRE,KAAK,CAACF,UAAN,GAAmBK,YAAY,CAACO,KAAb,GAAqBT,MAAM,CAACM,OAAP,CAAeE;AAHpD,WAAP;AAKD,SAPD,MAOO;AACLN,UAAAA,YAAY,CAACM,GAAb,GAAmBR,MAAM,CAACM,OAAP,CAAeE,GAAlC;AACA,cAAIE,QAAQ,GACVX,KAAK,CAACF,UAAN,GAAmBK,YAAY,CAACO,KAAb,GAAqBT,MAAM,CAACM,OAAP,CAAeE,GADzD;AAEA,iBAAO,EACL,GAAGT,KADE;AAELH,YAAAA,UAAU,EAAE,CAAC,GAAGG,KAAK,CAACH,UAAV,EAAsBM,YAAtB,CAFP;AAGLL,YAAAA,UAAU,EAAEa;AAHP,WAAP;AAKD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAK,aAAL;AACE,YAAMC,YAAY,GAAGX,MAAM,CAACM,OAA5B;AACA,aAAO,EACL,GAAGP,KADE;AAELJ,QAAAA,KAAK,EAAEgB;AAFF,OAAP;;AAKF;AACE,aAAOZ,KAAP;AAxDJ;AA0DD,CA3DD;;AA6DA,eAAeD,WAAf","sourcesContent":["const initState = {\n  items: [],\n  addedItems: [],\n  totalPrice: 0,\n};\n\nconst CartReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"increment\": {\n      let selectedItem = state.items.find(\n        (item) => item.id === action.payload.id\n      );\n\n      let existedItem = state.addedItems.find(\n        (item) => item.id === action.payload.id\n      );\n\n      if (existedItem) {\n        selectedItem.qty += action.payload.qty;\n        return {\n          ...state,\n          totalPrice:\n            state.totalPrice + selectedItem.price * action.payload.qty,\n        };\n      } else {\n        selectedItem.qty = action.payload.qty;\n        let newTotal =\n          state.totalPrice + selectedItem.price * action.payload.qty;\n        return {\n          ...state,\n          addedItems: [...state.addedItems, selectedItem],\n          totalPrice: newTotal,\n        };\n      }\n    }\n\n    // const newData = Object.assign([], { ...state });\n    // let item = newData.find((doughnut) => {\n    //   return doughnut.id == action.payload;\n    // });\n    // item.inCartSum += 1;\n    // newData[action.payload] = item;\n    // item = Object.assign([], { ...newData });\n    // return item;\n\n    // case \"decrement\":\n    //   const newData1 = Object.assign([], { ...state });\n    //   let item1 = newData1.find((doughnut) => {\n    //     return doughnut.id == action.payload;\n    //   });\n    //   item1.inCartSum += 1;\n    //   newData1[action.payload] = item;\n    //   item1 = Object.assign([], { ...newData1 });\n    //   return item1;\n\n    case \"FETCH_ITEMS\":\n      const fetchedItems = action.payload;\n      return {\n        ...state,\n        items: fetchedItems,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default CartReducer;\n"]},"metadata":{},"sourceType":"module"}